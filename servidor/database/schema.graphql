type Cliente {
    id: ID
    nombre: String
    apellido: String
    empresa: String
    emails: [Email]
    tipo: TipoCliente
    pedidos: [Pedido]
}

type Producto {
    id: ID
    nombre: String
    descripcion: String
    precio: Int
    stock: Int
    atributos: [Atributo]

}

type Factura {
    id: ID
    numero: Int
    fecha: String
    referencia: Int
    cliente: String
    misDatos: String
    Lineas: [Linea]
    baseImponible: Int
    recargoEquivalencia: Int
    retencion: Int
    formaDePago: String 
}

type Linea {
    cantidad: Int
    concepto: String
    precio: Int
    iva: Int
}

type Email {
    email: String
}
type Pedido {
    producto: String
    precio: Int
}

type Atributo {
    metrica: Int
    longitud: Int
}

""" Asigna la categoria del cliente """
enum TipoCliente {
    BASICO
    PREMIUM
}


type Query {
    getClientes(limite: Int, offset: Int) : [Cliente]
    getCliente(id: ID) : Cliente
    totalClientes: String
    
    #productos
    obtenerProductos(limite: Int, offset: Int) : [Producto]
    obtenerProducto(id: ID!) : Producto

    #Facturas
    obtenerFacturas(limite: Int, offset: Int) : [Factura]
    obtenerFactura(id: ID!) : Factura
}
input PedidoInput {
    producto: String
    precio: Int
}
input EmailInput {
    email: String
}

input LineaInput {
    cantidad: Int
    concepto: String
    precio: Int
    iva: Int
}
input AtributoInput {
    metrica: Int
    longitud: Int
}

""" Campos para nuevos clientes """
input ClienteInput {
    id: ID
    nombre: String!
    apellido: String!
    empresa: String!
    emails: [EmailInput]
    tipo: TipoCliente!
    pedidos: [PedidoInput]
}

input ProductoInput {
    id: ID
    nombre: String!
    descripcion: String!
    precio: Int!
    stock: Int!
    atributos: [AtributoInput]
}

input FacturaInput {
    id: ID
    numero: Int
    fecha: String
    referencia: Int
    cliente: String
    misDatos: String
    Lineas: [LineaInput]
    baseImponible: Int
    recargoEquivalencia: Int
    retencion: Int
    formaDePago: String
}

""" Mutations para crear nuevos clientes """
type Mutation {
        
    #Nombre del Resolver , Input con Datos y Valor que retorna
    """ Permite crear nuevos clientes """
    crearCliente(input: ClienteInput) : Cliente
    actualizarCliente(input: ClienteInput) : Cliente
    eliminarCliente(id: ID!) : String
    
    #Productos
    nuevoProducto(input: ProductoInput) : Producto
    actualizarProducto(input: ProductoInput) : Producto
    eliminarProducto(id: ID!) : String

    #Facturas
    nuevaFactura(input: FacturaInput) : Factura

}